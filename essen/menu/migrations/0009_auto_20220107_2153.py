# Generated by Django 2.1.11 on 2022-01-07 21:53

from django.db import migrations

from menu.models import MealTime, Weekday


def crate_meal_day_times(apps, schema_editor):
    live_layer_db = schema_editor.connection.alias
    MealDayTime = apps.get_model("menu", "MealDayTime")

    daytimes = [
        (Weekday.SUN, MealTime.BRUNCH),
        (Weekday.SUN, MealTime.DINNER),
        (Weekday.MON, MealTime.DINNER),
        (Weekday.TUE, MealTime.DINNER),
        (Weekday.WED, MealTime.DINNER),
        (Weekday.THU, MealTime.DINNER),
    ]

    MealDayTime.objects.using(live_layer_db).bulk_create(
        [MealDayTime(weekday=d.value, meal_time=t.value) for (d, t) in daytimes]
    )


def destroy_meal_day_times(apps, schema_editor):
    schema_editor.connection.alias
    MealDayTime = apps.get_model("menu", "MealDayTime")

    MealDayTime.objects.all().delete()


def assign_meal_day_time(apps, schema_editor):
    live_layer_db = schema_editor.connection.alias
    Meal = apps.get_model("menu", "Meal")
    MealDayTime = apps.get_model("menu", "MealDayTime")

    for meal in Meal.objects.using(live_layer_db).all():
        if meal.meal_name == "Sunday Brunch":
            meal.meal_day_time = MealDayTime.objects.filter(
                weekday=Weekday.SUN.value, meal_time=MealTime.BRUNCH.value
            ).first()
        elif meal.meal_name == "Sunday Dinner":
            meal.meal_day_time = MealDayTime.objects.filter(
                weekday=Weekday.SUN.value, meal_time=MealTime.DINNER.value
            ).first()
        elif meal.meal_name == "Monday Dinner":
            meal.meal_day_time = MealDayTime.objects.filter(
                weekday=Weekday.MON.value, meal_time=MealTime.DINNER.value
            ).first()
        elif meal.meal_name == "Tuesday Dinner":
            meal.meal_day_time = MealDayTime.objects.filter(
                weekday=Weekday.TUE.value, meal_time=MealTime.DINNER.value
            ).first()
        elif meal.meal_name == "Wednesday Dinner":
            meal.meal_day_time = MealDayTime.objects.filter(
                weekday=Weekday.WED.value, meal_time=MealTime.DINNER.value
            ).first()
        elif meal.meal_name == "Thursday Dinner":
            meal.meal_day_time = MealDayTime.objects.filter(
                weekday=Weekday.THU.value, meal_time=MealTime.DINNER.value
            ).first()
        else:
            raise ValueError(f"invalid meal name {meal.meal_name}")

        meal.save()


def assign_meal_rating_user(apps, schema_editor):
    live_layer_db = schema_editor.connection.alias
    User = apps.get_model("auth", "User")
    MealRating = apps.get_model("menu", "MealRating")

    for rating in MealRating.objects.using(live_layer_db).all():
        qs = User.objects.filter(username=rating.username)

        if qs.count() > 1:
            raise ValueError(
                f"Invalid queryset count {qs} for username {rating.username}"
            )

        rating.user = qs.first()
        rating.save()


class Migration(migrations.Migration):
    dependencies = [
        ("menu", "0008_auto_20220107_2005"),
    ]

    operations = [
        migrations.RunPython(crate_meal_day_times, destroy_meal_day_times, atomic=True),
        migrations.RunPython(assign_meal_day_time, atomic=True),
        migrations.RunPython(assign_meal_rating_user, atomic=True),
    ]
